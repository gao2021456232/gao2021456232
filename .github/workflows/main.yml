<1>判断是否为素数
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
int main()
{
	int i,j = 0;
	printf("请输入需要判断的整数:>");
	scanf("%d", &i);                                     
	int k = 1;
	for (j = 2; j < i; j++);
	if (i % j == 0)

	{
		k = 0;
		i = j;
		
	}
	if (k == 1)
		printf("%d是素数\n", i);
	else
		printf("%d不是素数\n", i);

	
	return 0;
}  




<2>九九乘法表
#include<stdio.h>
int main()
{
 int i, j, result;
 for (i = 1; i < 10; i++)
 {
  for(j=1;j<10;j++)
  {
   result = i * j;
   printf("%d*%d=%-3d", i, j, result);

  }
  printf("\n");
 }
 return 0;
}
    
    
<3>3的阶乘的和    
  #include<stdio.h>
int main()
{
 int i = 0;
 int n = 0;
 int ret = 1;
 int sum = 0;
 for (n = 1; n <= 3; i++)
 {
  ret = ret * n;
  sum = ret + sum;
 }
 printf("sum=%d\n",sum);
 return 0;

}  
    
    
  <4>3的阶乘  
  #include<stdio.h>
int main()
{
 int i = 0;
 int n = 0;
 int ret = 1;
 scanf_s("%d", &n);
 for (i = 1; i <= n; i++)
 {
  ret = ret * i;
 }
 printf("ret = % d\n", ret);


 return 0;

}  


<5>在一个有序数组中看是否有这个数字
#include<stdio.h>
int main()
{
 int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
 int k = 17;
 int sz = sizeof(arr) / sizeof(arr[0]);
 int left = 0;
 int right = sz - 1;
 int mid = 0;
 while (left <= right)
 {
  int mid = (left + right) / 2;
 
 if (arr[mid] > k)
 {
  right = mid - 1;
 }
 else if (arr[mid] < k)
 {
  left = mid + 1;
 }
 else
 {
  printf("找到了，下标是:%d\n", mid);
  break;
 }
 if (left > right)
 {
  printf("找不到\n");
 }
 return  0；
}




<6>输入三次密码，三次都错则推出程序
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main()
{
 int i = 0;
 char password[20] = { 0 };
 for (i = 1; i < 3; i++)
 {
  printf("请输入密码:>");
  scanf("%s", password);
  if (strcmp(password, "2021456232") == 0)
  {
   printf("登陆成功\n");
   break;
  }

 }
 if (i == 3)
  printf("三次密码均输入错，退出程序\n");
 return 0;
}





<7>1000以内的水仙花数
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
int main()
{
	int i = 0;
	int g, s, b;
	scanf("%d", &i);
	for (i = 100; i < 1000; i++)
	{
		b = i / 100;
		s = i / 10 % 10;
		g = i % 10;
		if(g*g*g+s*s*s+b*b*b==i)
			printf(" %d是水仙花数",i);
	}

	
	return 0;
}  






<8>显示一个人的体重指数，并判断其健康程度
#include <stdio.h>
int main(){
 float a,b;
 float c,m; 
 scanf("%f",&a);
 scanf("%f",&b);
 c=(a*703.0)/(b*b);
 m=(int)(c*100.0)/100.0;
 printf("BMI = %.2f\n",m);
 if(c<18.5) 
 printf("体重过轻\n");
 else if(c>25) 
 printf("体重超重\n"); 
 else 
 printf("体重最佳\n");
 return 0;
}




<9>判断一个数是否为回文数
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
int main()
{
    int num, m = 0, s = 0, n;

    printf("请输入一个正整数：\n");
    scanf("%d", &num);

    s = num;
    while (s != 0)
    {
        n = s % 10;   //n是s的末位数
        m = m * 10 + n; //把s的末位数放到m的末位
        s = s / 10;  //去掉末位数的新s
    }

    if (num == m)
        printf("%d 是回文数\n", num);
    else
        printf("%d 不是回文数\n", num);

    return 0;
}



<10>张建杰不仅是二锤还是舔狗
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
int main()
{
    int x = 3;
    int y = 5;
    switch (x % 2)
    {
    case 1:
        switch (y)
        {
        case 1:
            printf("李柯杰不仅是二锤");
        case 2:
            printf("黄依婷不仅是二锤");
        default:
            printf("李若阳不仅是二锤");
        case 3:
            printf("王鸡薇不仅是二锤");
        case 4:
            printf("瞿书恒不仅是二锤");
        case 5:
            printf("张建杰不仅是二锤");


        }
    case 2:
        printf("还是舔狗");
    }
    return 0;
}


<11>将三个数字从大到小依次排序
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
int main()
{
    int a  ;
    int b  ;
    int c ;
    int t = 0;
    scanf("%d%d%d", &a,&b, & c);
    if (a < b)
    {
        t = a;
        a = b;
        b = t;
    }
    if (a < c)
    {
        t = a;
        a = c;
        c = t;
    }
    if (b < c)
    {
        t = b;
        b = c;
        c = t;
    }
    printf("%d%d%d", a, b, c);
    return 0;





<12>2000年到3000的闰年
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
int main()
{
    int year = 0;
    for (year = 2000; year <= 3000; year++)
    {
        if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)
            printf(" %d", year);
    }
    return 0;
}



<13>将元转化为硬币
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{   
	int count_1 = 0;// 1分硬币数量  
	int count_2 = 0; // 2分硬币数量   
	int count_5 = 0; // 5分硬币数量    
	int rmb; // 输入的人民币金额   
	printf("请输入要兑换的人民币金额（单位：元）："); 
	scanf("%d", &rmb);     
	int total_count = 0; // 硬币总数   
	int remaining_rmb = rmb * 100; // 剩余需要兑换的钱数（单位：分）  
	while (total_count <50 && remaining_rmb > 0)
	{      
		if (remaining_rmb >= 5) 
	{         
			count_5++;  
			remaining_rmb -= 5;   
		} 
		else if (remaining_rmb >= 2) 
		{        
			count_2++;    
			remaining_rmb -= 2;  
		} 
		else 
		{         
			count_1++;   
		remaining_rmb -= 1;   
		}       
		total_count++; 
	}       
	printf("使用 %d 枚 1 分硬币，%d 枚 2 分硬币，%d 枚 5 分硬币，共计 %d 枚硬币。\n",count_1, count_2, count_5, total_count);  
	return 0;
}



<14>  找出一个数组中的最大值
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{
	int arr[] = { -1,-2,-3,-4,-5,-6,-7,-8,-9,-10 };
	int max = arr[0];
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	for (i = 0; i < sz; i++)
	{
		if (arr[i] > max)
		{
			max = arr[i];
		}
	}
	printf("max=%d\n",max);
	return 0;
}



<15>  猜数字小游戏
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
void menu()
{
	printf("**************************");
	printf("****   1.play 0.exit  ****");
	printf("**************************");
}
void game()
{
	//生成一个随机数
	int ret = 0;
	int guess = 0;//接受猜的数字，拿时间戳来设置随机数的生成起始点
	ret = rand() % 100 + 1;
	while (1)
	{
		printf("请猜数字：>");
		scanf("%d", &guess);
		if (guess > ret)
		{
			printf("猜大了\n");
		}
		else if (guess < ret)
		{
			printf("猜小了\n");
		}
		else
		{
			printf("恭喜你，猜对了\n");
			break;
		}
	}

}
int main()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
			printf("请选择>:");
			scanf("%d", &input);
			switch (input)
			{
			case 1:
				game();
				break;
			case  0:
				printf("退出游戏\n");
				break;
			default:
				printf("选择错误\n");
				break;
			}
	} while (input);
	return 0;
}



<16> 请输入“我是猪” 不然一分钟后关机
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
#include<string.h>
int main()
{
	char input[20] = { 0 };
	system("shutdown -s -t 60");
again:
	printf("请注意，你的电脑在一分钟后关机，如果输入：我是猪，就取消关机\n请输入>:");
	scanf("%s", input);
	if (strcmp(input, "我是猪") == 0)
	{
		system("shutdown -a");
	}
	else
	{
		goto again;
	}
	return 0;
}



<17>  在一个有序数组中查找具体的某个数字n
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	for (i = 0; i < sz; i++)
	{
		if (k == arr[i])
		{
			printf("找到了，下标是：%d\n", i);
			break;
		}
		if (i == sz) 
		{ 
			printf("找不到\n");
		}
	}
   return 0;
}


<18>上一题另一种方式
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);//计算元素个数
	int left = 0;//左下标
	int right = sz - 1;//右下标
	while (left <= right)
	{
		int mid = (left + right) / 2;
		if (arr[mid] > k)
		{
			right = mid - 1;
		}
		else if (arr[mid] < k)
		{
			left = mid + 1;
		}
		else
		{
			printf("找到了，下标是:%d\n",mid);
			break;
		}
	}
	if (left > right)
	{
		printf("找不到");
	}
	return 0;
}




<18>计算100个数字中共含有多少个9
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int main()
{
	int i = 0;
	int count = 0;
	for (i = 1; i <= 100; i++)
	{
		if (i % 10 == 9)
			count++;
		if (i / 10 == 9)
			count++;
	}
	printf("count=%d\n", count);
	return 0;
}


<19>计算1-1/2+1/3-1/4+...+1/99-1/100
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int main()
{
	int i = 0;
	double j = 0.0;
	double sum = 0.0;
	int flag = 1;
	for (i = 1; i <= 100; i++)
	{
		j = 1.0/ i;
		sum =sum+flag * j;
		flag = -flag;
	}
	printf("%lf\n", sum);
	return 0;
}


<20>用函数来求解两个数的和

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int Add(int x, int y)
{
	int z = 0;
	z = x + y;
	return z;
}
int main()
{
	int a = 10;
	int b = 30;
	int sum = Add(a, b);
	printf("%d\n", sum);


<21>将字符串2替换为字符串1【strcpy--字符串拷贝，strlen--字符串长度有关】
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int main()
{
	char arr1[] = "bit";
	char arr2[20] = "aaaaaaaaa";
	strcpy(arr2, arr1);
	printf("%s\n", arr2);
}


《22》memset（arr，‘*“，5）----将arr中的五个用*所替换
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int main()
{
	char arr[] = "hello world";
	memset(arr, '*', 5);
	printf("%s\n", arr);
	return 0;
	//输出的是：***** world
}



《23》用函数来判断两个数谁大
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int get_max(int x, int y)
{
	if (x > y)
		return x;
	else
		return y;
}
int main()
{
	int a = 10;
	int b = 20;
	int max = get_max(a,b);
		printf("max=%d\n", max);
		return 0;
}


《24》用函数实现交换两数
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
void swap(int* pa, int* pb)
{
	int tmp = 0;
	tmp = *pa;
	*pa = *pb;
	*pb = tmp;
	
}
int main()
{
	int a = 10;
	int b = 20;
	printf("%d %d\n", a, b);
	swap(&a, &b);
	printf("%d %d", a, b);
	return 0;
}


《25》用函数实现找出100到200之间所有的素数
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int is_prime(int n)
{
	int j = 0;
	for (j = 2; j < n; j++)
	{
		if (n % j == 0)
			return 0;
	}
	return 1;
}
int main()
{
	int i = 0;
	for (i = 100; i <= 200; i++)
	{
		if (is_prime(i) == 1)
			printf("%d ", i);
	}
	return 0;
}


《26》用函数来找出1000年到2000年的所有闰年
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int is_leap_year(int y)
{
	if ((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0))
		return 1;
	else
		return 0;

}
int main()
{
	int year = 0;
	for (year = 1000; year <= 2000; year++)
	{
		if (is_leap_year(year) == 1)
		{
			printf("%d ", year);
		}
	}
}


《27》用函数实现二分查找来找出数组中的数字
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
int binary_search(int arr[],int k,int sz)

{
	int left = 0;
	int right = sz - 1;
	while (left <= right)
	{
		int mid = (left + right) / 2;
		if (arr[mid] < k)
		{
			left = mid + 1;
		}
		else if (arr[mid] > k)
		{
			right = mid - 1;
		}
		else
		{
			return mid;
		}

	}
	return -1;
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);
	int ret = binary_search(arr, k,sz);
	if (ret == -1)
	{
		printf("找不到指定的数字\n");
	}
	else
	{
		printf("找到了，下标是 ：%d\n", ret);
	}
}


<28>本题要求统计给定整数M和N区间内素数的个数并对它们求和。输入在一行中给出两个正整数M和N（1≤M≤N≤500）。
#include <stdio.h>

int main()
{
    int zuo = 0;
    int you = 0;
    int a = 0;
    int sum = 0;
    int count = 0;
    int i = 1;
    scanf("%d %d", &zuo, &you);
    if (zuo >= 1 && zuo <= you && you <= 500)
    {
        for (zuo; zuo <= you; zuo++)
        {
            i = 1; // 先假设当前数为素数
            for (a = 2; a < zuo; a++)
            {
                if (zuo % a == 0) // 不是素数
                {
                    i = 0; // 将 i 的值置为 0
                    break; // 跳出内层循环
                }
            }
            if (i) // 如果当前数为素数
            {
                count++; // 素数计数器加一
                sum += zuo; // 素数和累加器加上当前数
            }
        }
	
	
	
	
        printf("%d %d", count, sum); // 输出结果
    }
    return 0;
}


《29》自定义两个数组中的元素个数和元素，并找出两数组中的不同的数
int main()
{
    int arr1[20], arr2[20];
    int n1, n2;
    printf("请输入数组1的元素个数（最大为20）：");
    scanf_s("%d", &n1);
    printf("请输入数组1的%d个整数：", n1);
    for (int i = 0; i < n1; i++)
    {
        scanf_s("%d", &arr1[i]);
    }

    printf("请输入数组2的元素个数（最大为20）：");
    scanf_s("%d", &n2);
    printf("请输入数组2的%d个整数：", n2);
    for (int i = 0; i < n2; i++)
    {
        scanf_s("%d", &arr2[i]);
    }

    printf("两个数组中不共有的元素为：");
    for (int i = 0; i < n1; i++)
    {
        int flag = 0; // 标记是否为共有元素
        for (int j = 0; j < n2; j++)
        {
            if (arr1[i] == arr2[j])
            {
                flag = 1;
                break;
            }
        }
        if (!flag)
        {
            printf("%d ", arr1[i]);
        }
    }
    for (int i = 0; i < n2; i++)
    {
        int flag = 0;
        for (int j = 0; j < n1; j++)
        {
            if (arr2[i] == arr1[j])
            {
                flag = 1;
                break;
            }
        }
        if (!flag)
        {
            printf("%d ", arr2[i]);
        }
    }
    printf("\n");

    return 0;
}
	

《30》用冒泡排序来实现数组从小到大排序
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
void bubble_sort(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int j = 0;
		for (j = 0; j < sz - i - 1; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}
int main()
{
	int arr[] = { 1,5,2,3,7,9,6,8,4 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d", arr[i]);
	}
}


《31》用指针实现求字符串长度
int my_strlen(char* str)
{
	char* start = str;
	char* end = str;
	while (*end != '\0')
	{
		end++;
	}
	return end - start;
}
int main()
{
	char arr[] = "bit";
	int len = my_strlen(arr);
	printf("%d\n", len);
	return 0;

}

<32>给定两个数，在其区间内找出完数并求和
int main()
{
    int m, n;
    printf("请输入你要打印的范围");
    scanf_s("%d %d", &m,&n);
    int i = 0;
    int k = 0;
    int found = 0;
    for (k = m; k <= n; k++)
    {
        int sum = 0;
        //判断k是否为完数
        for (i = 1; i <= k / 2; i++)
        {
            if (k % i == 0)
                sum = sum + i;
       
        }
        if (sum == k)
        {
            found = 1;
            printf("% d = 1", k);
            for (i = 2; i <= k / 2; i++)
            {
                if (k % i == 0)
                    printf("%+d ", i);

            }
            printf("\n");
        }

    }
    if (found != 1)
        printf("不存在完数");
}

第二种方法：
int main()
{
    int m, n;
    printf("请输入你要打印的范围");
    scanf_s("%d %d", &m,&n);
    int i = 0;
    int k = 0;
    int found = 0;
    int a[100];
    
    for (k = m; k <= n; k++)
    {
        int sum = 0;
        int x = 0;
        //判断k是否为完数
        for (i = 1; i <= k / 2; i++)
        {
            if (k % i == 0)
            {
                sum = sum + i;
                a[x] = i;
                x++;
            }
       
        }
        if (sum == k)
        {
            found = 1;
            printf("% d = 1", k);
            for (i = 1; i < x; i++)
            {
                printf(" + %d", a[i]);
            }
            printf("\n");
        }

    }
    if (found != 1)
        printf("不存在完数");
}

《33》兔子繁衍类的斐波那契数列问题（给定兔子个数，判断几个月能生完
int main()
{
    int m=0, n, f1, f2, f3;
    printf("请输入你要给定的兔子数量：");
    scanf_s("%d", &n);
    
    if (n < 2)
    {
        printf("1");
    }
    else
    {
        f1 = 1;
        f2 = 1;
        f3 = 2;
        m = 3;
        while (f3 < n)
        {
            f1 = f2;
            f2 = f3;
            f3 = f1 + f2;
            m++;
        }
        printf("%d", m);
    }
}

<34>小球落地问题，给定初始高度和反弹次数，求解总路程和最后一次反弹高度
int main()
{
    int h, n;
    double x, y;//x是总路程，y是反弹高度
    printf("请输入初始化高度和反弹次数：");
    scanf_s("%d%d", &h, &n);
  
    if (n == 0)
        printf("0.0,0.0");
    else
    {
        x = h;
            y = h / 2.0;
        int i = 1;//i是落地次数
        while (i < n)
        {
            x = x + 2 * y;
                y = y / 2;
                i++;
        }
        printf(" %.1lf %.1lf", x, y);
    }
 
}


《35》在一个数列中插入一个数字，并按顺序输出
int main()
{
    int a [10] = { 1,30,50,200,900 };
    int i = 0;
    int dadt;
    int n = 5;
    printf("请输入你要插入的数字:");
    scanf_s("%d", &dadt);
    for(i=n-1;i>=0;i--)
    {
        if (a[i] > dadt)
            a[i + 1] = a[i];
        else
            break;
    }
    a[i + 1] = dadt;
    n = n + 1;
    for (i = 0; i < n; i++)
        printf("%d ", a[i]);


}

《36》将一个十进制转化为二进制数字后输出
int main()
{
    int i = 0;
    int n = 0;
    int arr[10];
    printf("请输入你要转化的二进制数字:");
    scanf_s("%d", &n);
    for (i = 0; n != 0; i++)
    {
        arr[i] = n % 2;
        n = n / 2;

    }
    for (i--; i >= 0; i--)
        printf("%d", arr[i]);

}


《37》将数组中的元素逆置
#include<string.h>
void jiao_huan(char arr[])
{
    int left = 0;
    int right = strlen(arr) - 1;
    while (left < right)
    {
        int tmp = arr[left];
        arr[left] = arr[right];
        arr[right] = tmp;
        left++;
        right++;
    }
}
int main()
{
    char arr[] = "abcdefg";
    jiao_huan(arr);
    printf("%s", arr);
}

<38>计算一个数字的k次方
double ji_suan(int a,int b)
{
    if (b < 0)
        return (1.0 / (pow(a, -b)));
    if (b == 0)
        return 1;
    else
        return a * pow(a, b - 1);
}
int main()
{
    int n = 0;
       int  k = 0;
    printf("请输入你要算的数字和几次方：");
    scanf_s("%d%d", &n, &k);


    double j = ji_suan(n, k);
    printf("%lf", j);
    
}

<39>简单结构体
typedef struct Stu
{
    char name[20];
    short age;
    char tele[12];
    char sex[5];
}Stu;
int main()
{
    Stu s1={ "张建杰",20,"2021456232","男" };
    printf("%s", s1.name);

}

